# BASH PROMPT

# The following was inspired by the original Powerline port by Riobard Zhan (https://github.com/riobard/bash-powerline).

_powerline() {
  # Unicode symbols
  readonly OS_DARWIN_SYMBOL=''
  readonly OS_LINUX_SYMBOL='$'
  readonly OS_OTHER_SYMBOL='%'
  readonly GIT_BRANCH_SYMBOL='⑂'
  readonly GIT_BRANCH_NORMAL_SYMBOL='✓'
  readonly GIT_BRANCH_CHANGED_SYMBOL='+'
  readonly GIT_STASH_SYMBOL="@"
  readonly GIT_PUSH_SYMBOL='↑'
  readonly GIT_PULL_SYMBOL='↓'

  # Determine OS
  case "$(uname)" in
    Darwin)
      readonly OS_SYMBOL=$OS_DARWIN_SYMBOL
      ;;
    Linux)
      readonly OS_SYMBOL=$OS_LINUX_SYMBOL
      ;;
    *)
      readonly OS_SYMBOL=$OS_OTHER_SYMBOL
  esac

  _git_branch_info() {
    # Get current branch name or short SHA1 hash for detached head.
    local branch="$(git symbolic-ref --short HEAD 2>/dev/null || git describe --tags --always 2>/dev/null)"
    [ -n "$branch" ] || return  # Git branch not found.

    local marks=" $GIT_BRANCH_NORMAL_SYMBOL"

    # Check if branch is modified.
    [ -n "$(git status --porcelain)" ] && marks=" $GIT_BRANCH_CHANGED_SYMBOL"

    # Compute how many commits local branch is ahead/behind of remote branch.
    local stat="$(git status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
    local aheadN="$(echo $stat | grep -o 'ahead \d\+' | grep -o '\d\+')"
    local behindN="$(echo $stat | grep -o 'behind \d\+' | grep -o '\d\+')"
    [ -n "$aheadN" ] && marks+=" $GIT_PUSH_SYMBOL$aheadN"
    [ -n "$behindN" ] && marks+=" $GIT_PULL_SYMBOL$behindN"

    # Print the git branch segment without a trailing newline
    printf " $GIT_BRANCH_SYMBOL $branch$marks "
  }

  _git_stash_info() {
    local count=$(git stash list | wc -l | xargs -n 1)
    count="$count"

    if [[ $count > 0 ]]; then
      printf "$GIT_STASH_SYMBOL$count "
    fi
  }

  ps1() {
    # Check the exit code of the previous command and toggle background color accordingly.
    if [ $? -eq 0 ]; then
      local BG_EXIT="$GREEN_BACKGROUND"
    else
      local BG_EXIT="$RED_BACKGROUND"
    fi

    #PS1="\[$BLACK\]\[$WHITE_BACKGROUND\] \@ \[$NORMAL\]" # 12 hour datetime with AM/PM suffix.
    #PS1+="\[$BLACK\]\[$SILVER_BACKGROUND\] \u@\h \[$NORMAL\]" # User@host.
    PS1="\[$BLACK\]\[$SILVER_BACKGROUND\] \u@\h \[$NORMAL\]" # User@host.
    PS1+="\[$BLACK\]\[$CYAN_BACKGROUND\] ${PWD##*/} \[$NORMAL\]" # Directory.

    if [[ -d .git ]]; then
      #PS1+="\[$SLATE_BACKGROUND\] $(gail | egrep --only-matching '[^@]+$') \[$NORMAL\]" # Git Email Domain.
      #PS1+="\[$BLUE_BACKGROUND\]$(_git_branch_info)\[$NORMAL\]" # Git Branch Info.
      PS1+="\[$SILVER_BACKGROUND\]$(_git_branch_info)\[$NORMAL\]" # Git Branch Info.
      PS1+="\[$YELLOW\]\[$BLUE_BACKGROUND\]$(_git_stash_info)\[$NORMAL\]" # Git Stash Info.
    fi

    if [[ -d .dropbox.cache ]]; then
       export DROPBOX_SYMBOL='❌ '
       PS1+="\[$YELLOW\]\[$BLUE_BACKGROUND\] $DROPBOX_SYMBOL \[$NORMAL\]" # Git Stas Info.
    fi

    if [[ -f .todo ]]; then
    export TODO_SYMBOL='✓ '
    PS1+="\[$YELLOW\]\[$PURPLE_BACKGROUND\] $TODO_SYMBOL \[$NORMAL\]" # todo related
    fi


    PS1+="\[$BG_EXIT\] $OS_SYMBOL \[$NORMAL\] "
    PS1+="\033]0; ${HOSTNAME}\007"; # adds hostname to terminal title
  }

  PROMPT_COMMAND=ps1
}

_powerline
unset _powerline
